 ----- TRAINING CLASSIFIERS ----- 
Method:  concat 
Window size:  300 
Model type:  sktime.clustering.k_means.TimeSeriesKMeans 
Grid search params:  {'averaging_method': ['mean'], 'init_algorithm': ['kmeans++', 'forgy'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.582, test=0.631) total time=   0.4s
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.538, test=0.553) total time=   0.4s
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.862, test=0.856) total time=   0.4s
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.534, test=0.631) total time=   0.4s
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.871, test=0.872) total time=   0.4s
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.535, test=0.631) total time=   0.6s
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.558, test=0.559) total time=   0.6s
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.661, test=0.604) total time=   0.6s
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.867, test=0.892) total time=   0.7s
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.860, test=0.825) total time=   0.7s
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.625, test=0.625) total time= 1.9min
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.649, test=0.587) total time= 2.6min
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.652, test=0.718) total time=13.5min
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.619, test=0.617) total time=19.1min
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.580, test=0.531) total time=24.2min
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.664, test=0.718) total time=24.4min
Best estimator saved

------------------------------------------------

Method:  concat 
Window size:  300 
Model type:  sktime.clustering.k_medoids.TimeSeriesKMedoids 
Grid search params:  {'init_algorithm': ['forgy', 'random'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.659, test=0.582) total time=29.6min
[CV 1/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.578, test=0.597) total time=   0.3s
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.649, test=0.664) total time=29.9min
[CV 3/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.591, test=0.540) total time=   0.4s
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.659, test=0.582) total time=30.0min
[CV 4/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.671, test=0.676) total time=   0.4s
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.617, test=0.625) total time=29.8min
[CV 2/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.673, test=0.663) total time=   0.5s
[CV 4/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.742, test=0.740) total time=   0.6s
[CV 5/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.574, test=0.612) total time=   0.6s
[CV 1/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.578, test=0.597) total time=   0.6s
[CV 5/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.574, test=0.612) total time=   0.7s
[CV 2/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.654, test=0.604) total time=   0.6s
[CV 3/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.591, test=0.540) total time=   0.7s
[CV 2/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.572, test=0.641) total time= 1.4min
[CV 1/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.770, test=0.828) total time= 1.4min
[CV 2/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.795, test=0.815) total time= 1.5min
[CV 5/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.547, test=0.571) total time= 1.5min
[CV 1/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.803, test=0.784) total time= 1.5min
[CV 3/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.649, test=0.618) total time= 1.5min
[CV 4/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.827, test=0.863) total time= 1.5min
[CV 4/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.787, test=0.762) total time= 1.5min
[CV 5/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.719, test=0.608) total time= 1.5min
[CV 3/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.565, test=0.588) total time= 1.6min
[CV 3/5] END feature_selection=chi2;, score=(train=1.000, test=0.878) total time= 2.7min
[CV 5/5] END feature_selection=chi2;, score=(train=1.000, test=0.881) total time= 2.7min
[CV 2/5] END feature_selection=chi2;, score=(train=1.000, test=0.895) total time= 2.7min
[CV 1/5] END feature_selection=chi2;, score=(train=1.000, test=0.844) total time= 2.7min
[CV 4/5] END feature_selection=chi2;, score=(train=1.000, test=0.848) total time= 2.7min
Best estimator saved

------------------------------------------------

Method:  concat 
Window size:  300 
Model type:  sktime.classification.dictionary_based._boss.BOSSEnsemble 
Grid search params:  {'feature_selection': ['chi2', 'none']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
Best estimator saved

------------------------------------------------

Method:  concat 
Window size:  300 
Model type:  sktime.classification.distance_based._shape_dtw.ShapeDTW 
Grid search params:  {'shape_descriptor_function': ['raw', 'paa']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
Best estimator saved

------------------------------------------------

Method:  concat 
Window size:  600 
Model type:  sktime.clustering.k_means.TimeSeriesKMeans 
Grid search params:  {'averaging_method': ['mean'], 'init_algorithm': ['kmeans++', 'forgy'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
Best estimator saved

------------------------------------------------

Method:  concat 
Window size:  600 
Model type:  sktime.clustering.k_medoids.TimeSeriesKMedoids 
Grid search params:  {'init_algorithm': ['forgy', 'random'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.889) total time= 1.2min
[CV 1/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.572, test=0.543) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.864, test=0.920) total time=   0.4s
[CV 2/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.692, test=0.650) total time=   0.1s
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.900, test=0.917) total time=   0.4s
[CV 1/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.572, test=0.543) total time=   0.1s
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.897, test=0.845) total time=   0.4s
[CV 5/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.546, test=0.650) total time=   0.1s
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.864, test=0.959) total time=   0.4s
[CV 4/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.670, test=0.766) total time=   0.1s
[CV 3/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.775) total time= 1.2min
[CV 5/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.575, test=0.650) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.760) total time= 1.2min
[CV 2/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.555, test=0.553) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.760) total time= 1.2min
[CV 3/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.584, test=0.681) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.831) total time= 1.2min
[CV 4/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.613, test=0.840) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.844, test=0.882) total time=   0.4s
[CV 3/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.584, test=0.681) total time=   0.1s
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.851, test=0.917) total time=   0.6s
[CV 1/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.704, test=0.662) total time= 1.5min
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.911, test=0.959) total time=   0.6s
[CV 5/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.752, test=0.715) total time= 1.6min
[CV 5/5] END feature_selection=none;, score=(train=1.000, test=0.815) total time= 3.5min
[CV 2/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.732) total time= 1.3min
[CV 3/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.594, test=0.601) total time= 1.6min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END feature_selection=none;, score=(train=1.000, test=0.895) total time= 3.4min
[CV 1/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.816) total time= 1.3min
[CV 1/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.852, test=0.713) total time= 1.6min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END feature_selection=none;, score=(train=1.000, test=0.830) total time= 3.6min
[CV 3/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.700) total time= 1.3min
[CV 4/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.555, test=0.766) total time= 1.6min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END feature_selection=none;, score=(train=1.000, test=0.836) total time= 3.6min
[CV 4/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.748) total time= 1.3min
[CV 2/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.835, test=0.911) total time= 1.7min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.863, test=0.882) total time=   0.6s
[CV 3/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.747, test=0.730) total time= 1.7min
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.873, test=0.959) total time=   0.6s
[CV 4/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.780, test=0.833) total time= 1.7min
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.863, test=0.885) total time=   0.6s
[CV 2/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.729, test=0.803) total time= 1.7min
[CV 3/5] END feature_selection=none;, score=(train=1.000, test=0.926) total time= 3.6min
[CV 5/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.719) total time= 1.3min
[CV 5/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.842, test=0.750) total time= 1.8min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
Best estimator saved

------------------------------------------------

Method:  concat 
Window size:  600 
Model type:  sktime.classification.dictionary_based._boss.BOSSEnsemble 
Grid search params:  {'feature_selection': ['chi2', 'none']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
Best estimator saved

------------------------------------------------

Method:  concat 
Window size:  600 
Model type:  sktime.classification.distance_based._shape_dtw.ShapeDTW 
Grid search params:  {'shape_descriptor_function': ['raw', 'paa']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.632, test=0.643) total time= 1.3min
[CV 2/5] END feature_selection=chi2;, score=(train=1.000, test=0.821) total time= 2.6min
[CV 2/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.800) total time= 1.0min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.632, test=0.643) total time= 1.6min
[CV 1/5] END feature_selection=none;, score=(train=1.000, test=0.882) total time= 2.7min
[CV 3/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.643) total time= 1.0min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.632, test=0.643) total time= 1.6min
[CV 4/5] END feature_selection=none;, score=(train=1.000, test=0.882) total time= 2.7min
[CV 4/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.765) total time= 1.0min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
Best estimator saved

------------------------------------------------

Method:  concat 
Window size:  900 
Model type:  sktime.clustering.k_means.TimeSeriesKMeans 
Grid search params:  {'averaging_method': ['mean'], 'init_algorithm': ['kmeans++', 'forgy'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
Best estimator saved

------------------------------------------------

Method:  concat 
Window size:  900 
Model type:  sktime.clustering.k_medoids.TimeSeriesKMedoids 
Grid search params:  {'init_algorithm': ['forgy', 'random'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.553, test=0.508) total time= 1.8min
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.540, test=0.560) total time= 1.8min
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.553, test=0.508) total time= 1.8min
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.533, test=0.584) total time= 1.8min
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.540, test=0.560) total time= 1.9min
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.553, test=0.508) total time= 2.2min
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.540, test=0.560) total time= 2.3min
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.540, test=0.560) total time= 2.3min
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.533, test=0.584) total time= 2.4min
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.553, test=0.508) total time= 2.6min
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.632, test=0.643) total time= 1.6min
[CV 3/5] END feature_selection=none;, score=(train=1.000, test=0.871) total time= 2.7min
[CV 1/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.746) total time= 1.0min
[CV 1/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.550, test=0.584) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.643, test=0.603) total time= 1.3min
[CV 3/5] END feature_selection=chi2;, score=(train=1.000, test=0.765) total time= 2.5min
[CV 1/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.687) total time= 1.1min
[CV 4/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.580, test=0.571) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.587, test=0.508) total time=   0.4s
[CV 4/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.580, test=0.571) total time=   0.1s
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.911, test=1.000) total time=   0.4s
[CV 2/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.620, test=0.588) total time=   0.1s
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.838, test=0.939) total time=   0.4s
[CV 1/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.550, test=0.584) total time=   0.1s
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.802, test=0.819) total time=   0.4s
[CV 3/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.546, test=0.597) total time=   0.1s
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.925, test=0.817) total time=   0.4s
[CV 5/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.556, test=0.560) total time=   0.1s
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.643, test=0.603) total time= 1.6min
[CV 2/5] END feature_selection=none;, score=(train=1.000, test=0.833) total time= 2.8min
[CV 5/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.800) total time= 1.0min
[CV 2/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.538, test=0.508) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.632, test=0.643) total time= 1.3min
[CV 4/5] END feature_selection=chi2;, score=(train=1.000, test=0.840) total time= 2.6min
[CV 3/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.643) total time= 1.1min
[CV 5/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.556, test=0.560) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.632, test=0.643) total time= 1.3min
[CV 1/5] END feature_selection=chi2;, score=(train=1.000, test=0.780) total time= 2.6min
[CV 5/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.730) total time= 1.1min
[CV 3/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.587, test=0.508) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
Best estimator saved

------------------------------------------------

Method:  concat 
Window size:  900 
Model type:  sktime.classification.dictionary_based._boss.BOSSEnsemble 
Grid search params:  {'feature_selection': ['chi2', 'none']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV 4/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.830, test=0.729) total time= 2.2min
[CV 3/5] END feature_selection=none;, score=(train=1.000, test=0.819) total time= 2.7min
Best estimator saved

------------------------------------------------

Method:  concat 
Window size:  900 
Model type:  sktime.classification.distance_based._shape_dtw.ShapeDTW 
Grid search params:  {'shape_descriptor_function': ['raw', 'paa']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.840, test=1.000) total time=   0.6s
[CV 1/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.813, test=0.796) total time= 2.1min
[CV 2/5] END feature_selection=chi2;, score=(train=1.000, test=0.819) total time= 3.5min
[CV 2/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.628) total time= 1.1min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.587, test=0.508) total time=   0.6s
[CV 3/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.568, test=0.640) total time= 2.1min
[CV 1/5] END feature_selection=chi2;, score=(train=1.000, test=0.828) total time= 3.4min
[CV 1/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.659) total time= 1.1min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.835, test=0.939) total time=   0.6s
[CV 4/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.830, test=0.729) total time= 2.2min
[CV 5/5] END feature_selection=chi2;, score=(train=1.000, test=0.750) total time= 3.6min
[CV 4/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.806) total time= 1.1min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.567, test=0.584) total time=   0.6s
[CV 2/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.777, test=0.940) total time= 2.1min
[CV 4/5] END feature_selection=chi2;, score=(train=1.000, test=0.865) total time= 3.5min
[CV 3/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.628) total time= 1.1min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.632, test=0.643) total time= 1.4min
[CV 5/5] END feature_selection=chi2;, score=(train=1.000, test=0.911) total time= 2.6min
[CV 2/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.730) total time= 1.1min
[CV 1/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.813, test=0.796) total time= 2.2min
[CV 4/5] END feature_selection=none;, score=(train=1.000, test=1.000) total time= 2.8min
[CV 2/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.628) total time= 1.1min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.632, test=0.643) total time= 1.7min
[CV 5/5] END feature_selection=none;, score=(train=1.000, test=0.917) total time= 2.7min
[CV 4/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.643) total time= 1.1min
[CV 2/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.616, test=0.875) total time= 2.2min
[CV 1/5] END feature_selection=none;, score=(train=1.000, test=0.887) total time= 2.8min
[CV 3/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.508) total time= 1.1min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
Best estimator saved

------------------------------------------------

Method:  difference 
Window size:  300 
Model type:  sktime.clustering.k_means.TimeSeriesKMeans 
Grid search params:  {'averaging_method': ['mean'], 'init_algorithm': ['kmeans++', 'forgy'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
Best estimator saved

------------------------------------------------

Method:  difference 
Window size:  300 
Model type:  sktime.clustering.k_medoids.TimeSeriesKMedoids 
Grid search params:  {'init_algorithm': ['forgy', 'random'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
Best estimator saved

------------------------------------------------

Method:  difference 
Window size:  300 
Model type:  sktime.classification.dictionary_based._boss.BOSSEnsemble 
Grid search params:  {'feature_selection': ['chi2', 'none']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.587, test=0.508) total time=   0.6s
[CV 5/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.546, test=0.686) total time= 2.1min
[CV 3/5] END feature_selection=chi2;, score=(train=1.000, test=0.819) total time= 3.4min
[CV 5/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.560) total time= 1.1min
[CV 3/5] END feature_selection=chi2;, score=(train=1.000, test=0.654) total time= 1.1min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.871, test=0.817) total time=   0.4s
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.882, test=0.818) total time=   0.4s
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.854, test=0.883) total time=   0.4s
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.854, test=0.932) total time=   0.4s
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.862, test=0.883) total time=   0.6s
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.866, test=0.866) total time=   0.4s
Best estimator saved

------------------------------------------------

Method:  difference 
Window size:  300 
Model type:  sktime.classification.distance_based._shape_dtw.ShapeDTW 
Grid search params:  {'shape_descriptor_function': ['raw', 'paa']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.854, test=0.932) total time=   0.6s
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.875, test=0.817) total time=   0.6s
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.862, test=0.866) total time=   0.6s
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.882, test=0.818) total time=   0.6s
[CV 2/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.735, test=0.786) total time=   0.6s
[CV 5/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.837, test=0.751) total time=   0.6s
[CV 5/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.837, test=0.751) total time=   0.7s
[CV 4/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.735, test=0.786) total time=   0.7s
[CV 2/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.735, test=0.786) total time=   0.6s
[CV 1/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.752, test=0.718) total time=   0.7s
[CV 3/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.740, test=0.769) total time=   0.6s
[CV 3/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.740, test=0.769) total time=   0.7s
[CV 4/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.735, test=0.786) total time=   0.7s
[CV 1/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.752, test=0.718) total time=   0.8s
[CV 5/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.891, test=0.915) total time=  20.3s
[CV 4/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.879, test=0.899) total time=  20.2s
[CV 4/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.879, test=0.899) total time=  20.4s
[CV 1/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.863, test=0.835) total time=  20.8s
[CV 5/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.891, test=0.915) total time=  21.2s
[CV 3/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.887, test=0.866) total time=  21.9s
[CV 3/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.887, test=0.866) total time=  23.5s
[CV 2/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.871, test=0.932) total time=  23.9s
[CV 2/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.871, test=0.932) total time=  24.2s
[CV 1/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.863, test=0.835) total time=  25.5s
[CV 5/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.639) total time= 1.1min
[CV 1/5] END feature_selection=chi2;, score=(train=1.000, test=0.840) total time= 1.1min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.722, test=0.686) total time= 2.2min
[CV 5/5] END feature_selection=none;, score=(train=1.000, test=0.758) total time= 2.8min
[CV 4/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.729) total time= 1.1min
[CV 2/5] END feature_selection=chi2;, score=(train=1.000, test=0.762) total time= 1.1min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END feature_selection=chi2;, score=(train=1.000, test=0.680) total time= 1.1min
[CV 3/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.924, test=0.826) total time= 2.1min
[CV 2/5] END feature_selection=none;, score=(train=1.000, test=0.724) total time= 2.8min
[CV 1/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.659) total time= 1.1min
[CV 4/5] END feature_selection=chi2;, score=(train=1.000, test=0.756) total time= 1.1min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
Best estimator saved

------------------------------------------------

Method:  difference 
Window size:  600 
Model type:  sktime.clustering.k_means.TimeSeriesKMeans 
Grid search params:  {'averaging_method': ['mean'], 'init_algorithm': ['kmeans++', 'forgy'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.851, test=0.817) total time=  15.2s
[CV 1/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.844) total time=  35.2s
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.873, test=0.920) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.838, test=0.932) total time=  16.6s
[CV 4/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.825) total time=  35.0s
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.921, test=0.840) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END feature_selection=none;, score=(train=1.000, test=0.863) total time= 1.5min
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.911, test=0.959) total time=   0.2s
[CV 5/5] END feature_selection=none;, score=(train=1.000, test=0.895) total time= 1.5min
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.891, test=0.920) total time=   0.2s
[CV 3/5] END feature_selection=none;, score=(train=1.000, test=0.862) total time= 1.5min
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.891, test=0.920) total time=   0.3s
[CV 4/5] END feature_selection=none;, score=(train=1.000, test=0.817) total time= 1.5min
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.902, test=0.840) total time=   0.3s
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.910, test=0.848) total time=   0.4s
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.873, test=0.959) total time=   0.4s
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.901, test=0.920) total time=   0.4s
Best estimator saved

------------------------------------------------

Method:  difference 
Window size:  600 
Model type:  sktime.clustering.k_medoids.TimeSeriesKMedoids 
Grid search params:  {'init_algorithm': ['forgy', 'random'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
Best estimator saved

------------------------------------------------

Method:  difference 
Window size:  600 
Model type:  sktime.classification.dictionary_based._boss.BOSSEnsemble 
Grid search params:  {'feature_selection': ['chi2', 'none']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
Best estimator saved

------------------------------------------------

Method:  difference 
Window size:  600 
Model type:  sktime.classification.distance_based._shape_dtw.ShapeDTW 
Grid search params:  {'shape_descriptor_function': ['raw', 'paa']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.851, test=0.817) total time=  13.0s
[CV 2/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.911) total time=  39.8s
[CV 1/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.842, test=0.885) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.838, test=0.932) total time=  13.8s
[CV 4/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.800) total time=  39.6s
[CV 2/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.864, test=0.797) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.858, test=0.866) total time=  13.0s
[CV 1/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.850) total time=  39.7s
[CV 3/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.835, test=0.844) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.864, test=0.797) total time=   0.4s
[CV 1/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.842, test=0.885) total time=   0.4s
[CV 4/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.842, test=0.882) total time=   0.4s
[CV 5/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.862, test=0.806) total time=   0.4s
[CV 4/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.842, test=0.882) total time=   0.4s
[CV 5/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.862, test=0.806) total time=   0.4s
[CV 3/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.835, test=0.844) total time=   0.4s
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.838, test=0.867) total time=  18.1s
[CV 5/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.815) total time=  35.8s
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.807, test=0.882) total time=  59.2s
[CV 4/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.871) total time=  30.2s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.858, test=0.866) total time=  14.9s
[CV 5/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.848) total time=  38.6s
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.873, test=0.844) total time=  42.8s
[CV 2/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.730) total time=  31.4s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.878, test=0.785) total time=  13.6s
[CV 3/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.848) total time=  38.7s
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.835, test=0.882) total time=  50.7s
[CV 5/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.920) total time=  31.7s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.874, test=0.785) total time=  15.3s
[CV 2/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.825) total time=  36.0s
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.873, test=0.920) total time=  49.2s
[CV 4/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.800) total time=  32.3s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.902, test=0.959) total time=  38.0s
[CV 5/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.902, test=0.959) total time=  38.9s
[CV 1/5] END feature_selection=none;, score=(train=1.000, test=0.881) total time= 1.5min
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.899, test=0.885) total time=   0.2s
[CV 4/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.902, test=0.959) total time=  40.2s
[CV 2/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.911, test=0.920) total time=  40.1s
[CV 1/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.920, test=0.885) total time=  41.5s
[CV 5/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.902, test=0.959) total time=  41.8s
[CV 2/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.911, test=0.920) total time=  42.0s
[CV 1/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.920, test=0.885) total time=  42.3s
[CV 3/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.909, test=0.882) total time=  43.3s
[CV 3/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.909, test=0.882) total time=  45.7s
Best estimator saved

------------------------------------------------

Method:  difference 
Window size:  900 
Model type:  sktime.clustering.k_means.TimeSeriesKMeans 
Grid search params:  {'averaging_method': ['mean'], 'init_algorithm': ['kmeans++', 'forgy'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.835, test=0.882) total time=  56.1s
[CV 3/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.871) total time=  30.8s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.873, test=0.844) total time=  50.6s
[CV 1/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.840) total time=  30.9s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.807, test=0.882) total time= 1.0min
[CV 5/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.797) total time=  30.9s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.825, test=0.772) total time=  50.7s
[CV 2/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.700) total time=  30.9s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.873, test=0.920) total time=  39.7s
[CV 1/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.603) total time=  33.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.838, test=0.867) total time=  15.8s
[CV 3/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.830) total time=  35.5s
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.825, test=0.772) total time=  43.8s
[CV 3/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.643) total time=  32.5s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END feature_selection=chi2;, score=(train=1.000, test=0.920) total time= 1.0min
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.896, test=0.887) total time=   0.2s
[CV 5/5] END feature_selection=chi2;, score=(train=1.000, test=0.878) total time= 1.1min
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.911, test=0.939) total time=   0.2s
[CV 3/5] END feature_selection=chi2;, score=(train=1.000, test=0.920) total time= 1.1min
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.911, test=0.940) total time=   0.2s
[CV 5/5] END feature_selection=none;, score=(train=1.000, test=0.959) total time= 1.2min
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.897, test=0.817) total time=   0.2s
[CV 4/5] END feature_selection=chi2;, score=(train=1.000, test=0.727) total time= 1.1min
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.896, test=0.942) total time=   0.3s
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.927, test=0.817) total time=   0.4s
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.896, test=0.942) total time=   0.4s
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.911, test=0.940) total time=   0.4s
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.896, test=0.887) total time=   0.4s
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.926, test=0.939) total time=   0.4s
[CV 2/5] END feature_selection=chi2;, score=(train=1.000, test=0.806) total time= 1.1min
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.495, test=0.489) total time= 5.4min
[CV 3/5] END feature_selection=none;, score=(train=1.000, test=0.959) total time= 1.2min
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.510, test=0.560) total time= 5.4min
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.912, test=0.942) total time=  47.5s
[CV 2/5] END feature_selection=none;, score=(train=1.000, test=0.806) total time= 1.2min
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.912, test=0.885) total time=  49.1s
[CV 4/5] END feature_selection=none;, score=(train=1.000, test=0.920) total time= 1.2min
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.927, test=0.879) total time=  55.1s
[CV 1/5] END feature_selection=none;, score=(train=1.000, test=0.840) total time= 1.2min
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.506, test=0.508) total time=10.0min
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.510, test=0.560) total time= 9.9min
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.495, test=0.489) total time= 9.9min
Best estimator saved

------------------------------------------------

Method:  difference 
Window size:  900 
Model type:  sktime.clustering.k_medoids.TimeSeriesKMedoids 
Grid search params:  {'init_algorithm': ['forgy', 'random'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.502, test=0.560) total time=19.2min
[CV 2/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.911, test=0.885) total time=   0.0s
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.530, test=0.479) total time=14.4min
[CV 1/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.940, test=0.887) total time=   0.1s
[CV 3/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.896, test=0.942) total time=   0.1s
[CV 1/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.940, test=0.887) total time=   0.4s
[CV 5/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.927, test=0.817) total time=   0.4s
[CV 2/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.911, test=0.885) total time=   0.4s
[CV 5/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.927, test=0.817) total time=   0.4s
[CV 4/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.869, test=1.000) total time=   0.4s
[CV 4/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.869, test=1.000) total time=   0.4s
[CV 3/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.896, test=0.942) total time=   0.4s
[CV 2/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.912, test=0.885) total time=  47.0s
[CV 3/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.912, test=0.885) total time=  47.1s
[CV 2/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.912, test=0.885) total time=  49.0s
[CV 4/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.884, test=1.000) total time=  49.6s
[CV 5/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.940, test=0.729) total time=  50.2s
[CV 5/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.940, test=0.729) total time=  50.6s
[CV 3/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.912, test=0.885) total time=  50.7s
[CV 1/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.926, test=0.887) total time=  51.3s
[CV 4/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.884, test=1.000) total time=  55.0s
[CV 1/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.926, test=0.887) total time= 1.0min
Best estimator saved

------------------------------------------------

Method:  difference 
Window size:  900 
Model type:  sktime.classification.dictionary_based._boss.BOSSEnsemble 
Grid search params:  {'feature_selection': ['chi2', 'none']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
Best estimator saved

------------------------------------------------

Method:  difference 
Window size:  900 
Model type:  sktime.classification.distance_based._shape_dtw.ShapeDTW 
Grid search params:  {'shape_descriptor_function': ['raw', 'paa']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
Best estimator saved

------------------------------------------------

Method:  ai 
Window size:  300 
Model type:  sktime.clustering.k_means.TimeSeriesKMeans 
Grid search params:  {'averaging_method': ['mean'], 'init_algorithm': ['kmeans++', 'forgy'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END feature_selection=none;, score=(train=1.000, test=0.885) total time= 1.2min
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.875, test=0.899) total time=   0.3s
[CV 1/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.765) total time=  33.5s
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.883, test=0.883) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 3/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.628) total time=  33.1s
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.895, test=0.818) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.865) total time=  32.8s
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.859, test=0.899) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.939) total time=  32.9s
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.883, test=0.864) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.805) total time=  32.5s
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.875, test=0.899) total time=   0.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END feature_selection=none;, score=(train=1.000, test=0.758) total time= 1.3min
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.879, test=0.864) total time=   0.3s
[CV 5/5] END feature_selection=none;, score=(train=1.000, test=1.000) total time= 1.2min
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.859, test=0.899) total time=   0.3s
[CV 1/5] END feature_selection=none;, score=(train=1.000, test=0.943) total time= 1.3min
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.883, test=0.883) total time=   0.3s
[CV 3/5] END feature_selection=none;, score=(train=1.000, test=0.768) total time= 1.3min
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.895, test=0.818) total time=   0.3s
[CV 3/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.479) total time=  33.4s
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.851, test=0.883) total time= 5.1min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.555) total time=  33.6s
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.843, test=0.818) total time=  11.4s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.508) total time=  33.5s
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.883, test=0.786) total time=  12.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.686) total time=  33.6s
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.843, test=0.883) total time=  12.2s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END feature_selection=chi2;, score=(train=1.000, test=1.000) total time= 1.5min
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.883, test=0.786) total time=  14.5s
[CV 2/5] END feature_selection=chi2;, score=(train=1.000, test=0.827) total time= 1.5min
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.843, test=0.818) total time=  14.7s
[CV 1/5] END feature_selection=chi2;, score=(train=1.000, test=0.943) total time= 1.6min
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.843, test=0.883) total time=  14.8s
[CV 5/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.939) total time=  33.6s
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.879, test=0.851) total time=  14.8s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END feature_selection=chi2;, score=(train=1.000, test=0.819) total time= 1.6min
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.879, test=0.851) total time=  17.3s
[CV 3/5] END feature_selection=chi2;, score=(train=1.000, test=0.640) total time= 1.5min
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.851, test=0.883) total time= 7.1min
Best estimator saved

------------------------------------------------

Method:  ai 
Window size:  300 
Model type:  sktime.clustering.k_medoids.TimeSeriesKMedoids 
Grid search params:  {'init_algorithm': ['forgy', 'random'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 2/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.773, test=0.867) total time=   0.6s
[CV 1/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.802, test=0.752) total time=   0.6s
[CV 4/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.798, test=0.769) total time=   0.7s
[CV 5/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.822, test=0.786) total time=   0.7s
[CV 2/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.773, test=0.867) total time=   0.7s
[CV 3/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.867, test=0.834) total time=   0.7s
[CV 5/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.822, test=0.786) total time=   0.7s
[CV 4/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.798, test=0.769) total time=   0.6s
[CV 1/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.802, test=0.752) total time=   0.8s
[CV 3/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.867, test=0.834) total time=   0.8s
[CV 5/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.876, test=0.840) total time=  19.8s
[CV 5/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.876, test=0.840) total time=  20.2s
[CV 4/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.842, test=0.882) total time=  20.4s
[CV 1/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.845, test=0.867) total time=  20.7s
[CV 1/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.845, test=0.867) total time=  20.7s
[CV 3/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.874, test=0.848) total time=  21.0s
[CV 2/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.854, test=0.830) total time=  21.4s
[CV 3/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.874, test=0.848) total time=  21.8s
[CV 2/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.854, test=0.830) total time=  22.1s
[CV 4/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.842, test=0.882) total time=  22.8s
Best estimator saved

------------------------------------------------

Method:  ai 
Window size:  300 
Model type:  sktime.classification.dictionary_based._boss.BOSSEnsemble 
Grid search params:  {'feature_selection': ['chi2', 'none']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
Best estimator saved

------------------------------------------------

Method:  ai 
Window size:  300 
Model type:  sktime.classification.distance_based._shape_dtw.ShapeDTW 
Grid search params:  {'shape_descriptor_function': ['raw', 'paa']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
Best estimator saved

------------------------------------------------

Method:  ai 
Window size:  600 
Model type:  sktime.clustering.k_means.TimeSeriesKMeans 
Grid search params:  {'averaging_method': ['mean'], 'init_algorithm': ['kmeans++', 'forgy'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END feature_selection=none;, score=(train=1.000, test=0.876) total time= 1.5min
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.816, test=0.844) total time= 4.5min
[CV 1/5] END feature_selection=chi2;, score=(train=1.000, test=0.718) total time= 1.1min
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.863, test=0.885) total time=   0.2s
[CV 4/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.720) total time=  35.7s
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.892, test=0.882) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.790) total time=  36.3s
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.873, test=0.806) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.732) total time=  36.5s
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.883, test=0.920) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 3/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.707) total time=  35.6s
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.863, test=0.885) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.805) total time=  36.3s
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.864, test=0.920) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END feature_selection=chi2;, score=(train=1.000, test=0.784) total time= 1.2min
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.883, test=0.920) total time=   0.2s
[CV 2/5] END feature_selection=chi2;, score=(train=1.000, test=0.815) total time= 1.2min
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.873, test=0.920) total time=   0.2s
[CV 5/5] END feature_selection=chi2;, score=(train=1.000, test=0.789) total time= 1.1min
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.835, test=0.882) total time=   0.3s
[CV 3/5] END feature_selection=chi2;, score=(train=1.000, test=0.825) total time= 1.1min
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.873, test=0.806) total time=   0.3s
[CV 1/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.732) total time=  39.5s
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.816, test=0.643) total time=  39.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.622) total time=  39.4s
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.807, test=0.806) total time=  41.2s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.617) total time=  39.1s
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.815, test=0.772) total time=  42.4s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END feature_selection=none;, score=(train=1.000, test=0.815) total time= 1.5min
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.807, test=0.806) total time=  42.8s
[CV 2/5] END feature_selection=none;, score=(train=1.000, test=0.882) total time= 1.5min
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.815, test=0.772) total time=  44.9s
[CV 4/5] END feature_selection=none;, score=(train=1.000, test=0.816) total time= 1.5min
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.816, test=0.643) total time=  49.7s
[CV 5/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.625) total time=  39.8s
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.807, test=0.844) total time=15.7min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 3/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.664) total time=  39.5s
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.787, test=0.920) total time=38.6min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 3/5] END feature_selection=none;, score=(train=1.000, test=0.808) total time= 1.5min
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.787, test=0.920) total time=38.8min
Best estimator saved

------------------------------------------------

Method:  ai 
Window size:  600 
Model type:  sktime.clustering.k_medoids.TimeSeriesKMedoids 
Grid search params:  {'init_algorithm': ['forgy', 'random'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 2/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.873, test=0.844) total time=   0.4s
[CV 5/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.826, test=0.844) total time=   0.4s
[CV 1/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.834, test=0.810) total time=   0.4s
[CV 2/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.873, test=0.844) total time=   0.5s
[CV 4/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.807, test=0.882) total time=   0.4s
[CV 5/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.826, test=0.844) total time=   0.4s
[CV 4/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.807, test=0.882) total time=   0.4s
[CV 3/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.797, test=0.920) total time=   0.5s
[CV 3/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.797, test=0.920) total time=   0.4s
[CV 1/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.834, test=0.810) total time=   0.5s
[CV 1/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.805, test=0.772) total time=  40.0s
[CV 2/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.861, test=0.806) total time=  41.1s
[CV 3/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.816, test=0.882) total time=  42.3s
[CV 3/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.816, test=0.882) total time=  42.3s
[CV 1/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.805, test=0.772) total time=  43.7s
[CV 5/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.873, test=0.859) total time=  44.1s
[CV 4/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.787, test=0.844) total time=  44.4s
[CV 4/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.787, test=0.844) total time=  44.7s
[CV 5/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.873, test=0.859) total time=  45.2s
[CV 2/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.816, test=0.727) total time=  45.9s
Best estimator saved

------------------------------------------------

Method:  ai 
Window size:  600 
Model type:  sktime.classification.dictionary_based._boss.BOSSEnsemble 
Grid search params:  {'feature_selection': ['chi2', 'none']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
Best estimator saved

------------------------------------------------

Method:  ai 
Window size:  600 
Model type:  sktime.classification.distance_based._shape_dtw.ShapeDTW 
Grid search params:  {'shape_descriptor_function': ['raw', 'paa']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
Best estimator saved

------------------------------------------------

Method:  ai 
Window size:  900 
Model type:  sktime.clustering.k_means.TimeSeriesKMeans 
Grid search params:  {'averaging_method': ['mean'], 'init_algorithm': ['kmeans++', 'forgy'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END feature_selection=chi2;, score=(train=1.000, test=0.923) total time= 1.0min
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.955, test=0.716) total time=   0.2s
[CV 2/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.700) total time=  31.8s
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.884, test=1.000) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 3/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.800) total time=  31.9s
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.884, test=0.939) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.911) total time=  30.9s
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.868, test=1.000) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.800) total time=  30.8s
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.940, test=0.716) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.831) total time=  31.1s
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.912, test=0.885) total time=   0.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END feature_selection=chi2;, score=(train=1.000, test=0.920) total time= 1.1min
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.884, test=1.000) total time=   0.2s
[CV 3/5] END feature_selection=chi2;, score=(train=1.000, test=0.806) total time= 1.0min
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.868, test=1.000) total time=   0.2s
[CV 2/5] END feature_selection=chi2;, score=(train=1.000, test=0.844) total time= 1.1min
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.884, test=0.939) total time=   0.2s
[CV 4/5] END feature_selection=chi2;, score=(train=1.000, test=0.920) total time= 1.1min
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=euclidean, n_clusters=2;, score=(train=0.912, test=0.885) total time=   0.3s
[CV 1/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.693) total time=  32.5s
[CV 1/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.911, test=0.716) total time=  48.8s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END feature_selection=none;, score=(train=1.000, test=0.882) total time= 1.2min
[CV 4/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.870, test=0.879) total time=  50.4s
[CV 2/5] END feature_selection=none;, score=(train=1.000, test=0.840) total time= 1.2min
[CV 2/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.839, test=1.000) total time=  50.8s
[CV 4/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.643) total time=  32.5s
[CV 2/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.839, test=1.000) total time=  55.2s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.643) total time=  32.7s
[CV 3/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.897, test=0.885) total time=  55.7s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END feature_selection=none;, score=(train=1.000, test=0.780) total time= 1.2min
[CV 3/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.897, test=0.885) total time=  57.5s
[CV 5/5] END feature_selection=none;, score=(train=1.000, test=0.821) total time= 1.2min
[CV 5/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.884, test=0.879) total time=  59.1s
[CV 3/5] END feature_selection=none;, score=(train=1.000, test=0.767) total time= 1.2min
[CV 1/5] END averaging_method=mean, init_algorithm=kmeans++, metric=dtw, n_clusters=2;, score=(train=0.911, test=0.716) total time= 1.1min
[CV 5/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.859) total time=  32.9s
[CV 5/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.884, test=0.879) total time= 1.2min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 3/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.643) total time=  32.7s
[CV 4/5] END averaging_method=mean, init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.518, test=0.560) total time=10.0min
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
Best estimator saved

------------------------------------------------

Method:  ai 
Window size:  900 
Model type:  sktime.clustering.k_medoids.TimeSeriesKMedoids 
Grid search params:  {'init_algorithm': ['forgy', 'random'], 'metric': ['euclidean', 'dtw'], 'n_clusters': [2]}
Fitting 5 folds for each of 4 candidates, totalling 20 fits
[CV 1/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.897, test=0.887) total time=   0.4s
[CV 3/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.912, test=0.885) total time=   0.4s
[CV 4/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.898, test=0.939) total time=   0.4s
[CV 1/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.897, test=0.887) total time=   0.4s
[CV 4/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.898, test=0.939) total time=   0.4s
[CV 5/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.898, test=0.939) total time=   0.4s
[CV 5/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.898, test=0.939) total time=   0.4s
[CV 2/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.881, test=0.942) total time=   0.4s
[CV 3/5] END init_algorithm=forgy, metric=euclidean, n_clusters=2;, score=(train=0.912, test=0.885) total time=   0.4s
[CV 2/5] END init_algorithm=random, metric=euclidean, n_clusters=2;, score=(train=0.881, test=0.942) total time=   0.4s
[CV 4/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.896, test=0.875) total time=  47.8s
[CV 3/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.863, test=0.942) total time=  48.8s
[CV 3/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.863, test=0.942) total time=  48.9s
[CV 2/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.868, test=0.827) total time=  49.1s
[CV 5/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.911, test=0.806) total time=  51.3s
[CV 5/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.911, test=0.806) total time=  51.3s
[CV 4/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.896, test=0.875) total time=  53.1s
[CV 2/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.868, test=0.827) total time=  53.2s
[CV 1/5] END init_algorithm=forgy, metric=dtw, n_clusters=2;, score=(train=0.909, test=0.828) total time=  55.0s
[CV 1/5] END init_algorithm=random, metric=dtw, n_clusters=2;, score=(train=0.909, test=0.828) total time=  55.3s
[CV 2/5] END feature_selection=none;, score=(train=1.000, test=0.942) total time= 1.2min
[CV 3/5] END feature_selection=none;, score=(train=1.000, test=0.710) total time= 1.2min
[CV 1/5] END feature_selection=none;, score=(train=1.000, test=0.882) total time= 1.3min
[CV 4/5] END feature_selection=none;, score=(train=1.000, test=0.879) total time= 1.3min
[CV 5/5] END feature_selection=none;, score=(train=1.000, test=0.939) total time= 1.3min
[CV 2/5] END feature_selection=chi2;, score=(train=1.000, test=0.827) total time= 1.5min
[CV 3/5] END feature_selection=chi2;, score=(train=1.000, test=0.706) total time= 1.5min
[CV 1/5] END feature_selection=chi2;, score=(train=1.000, test=0.943) total time= 1.5min
[CV 4/5] END feature_selection=chi2;, score=(train=1.000, test=0.879) total time= 1.6min
[CV 5/5] END feature_selection=chi2;, score=(train=1.000, test=0.879) total time= 1.6min
[CV 1/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.744) total time=  32.5s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.784) total time=  33.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 3/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.805) total time=  33.1s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.628) total time=  33.2s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 2/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.805) total time=  33.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END shape_descriptor_function=paa;, score=(train=1.000, test=0.495) total time=  33.6s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 4/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.784) total time=  33.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 1/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.744) total time=  33.8s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 3/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.819) total time=  33.9s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
[CV 5/5] END shape_descriptor_function=raw;, score=(train=1.000, test=0.495) total time=  34.0s
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
/home/scerramarchi/AInCP-Training/AInCP-env/lib/python3.8/site-packages/sktime/datatypes/_panel/_convert.py:759: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  x_nested[_label] = pd.Series(dim_list)
Best estimator saved

------------------------------------------------

Method:  ai 
Window size:  900 
Model type:  sktime.classification.dictionary_based._boss.BOSSEnsemble 
Grid search params:  {'feature_selection': ['chi2', 'none']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
Best estimator saved

------------------------------------------------

Method:  ai 
Window size:  900 
Model type:  sktime.classification.distance_based._shape_dtw.ShapeDTW 
Grid search params:  {'shape_descriptor_function': ['raw', 'paa']}
Fitting 5 folds for each of 2 candidates, totalling 10 fits
Best estimator saved

------------------------------------------------

 ----- TRAINING REGRESSOR ----- 
Loaded ->  Best_model/Trained_models/difference/300_seconds/TimeSeriesKMedoids/gridsearch_c42fbe82af/best_estimator.zip
Loaded ->  Best_model/Trained_models/ai/300_seconds/TimeSeriesKMeans/gridsearch_cb762cccb4/best_estimator.zip
Loaded ->  Best_model/Trained_models/concat/300_seconds/BOSSEnsemble/gridsearch_e52c627f3a/best_estimator.zip
Loaded ->  Best_model/Trained_models/difference/300_seconds/BOSSEnsemble/gridsearch_e52c627f3a/best_estimator.zip
Loaded ->  Best_model/Trained_models/difference/300_seconds/TimeSeriesKMeans/gridsearch_cb762cccb4/best_estimator.zip
Loaded ->  Best_model/Trained_models/ai/300_seconds/TimeSeriesKMedoids/gridsearch_c42fbe82af/best_estimator.zip
Loaded ->  Best_model/Trained_models/difference/300_seconds/ShapeDTW/gridsearch_e8df20c70e/best_estimator.zip
REGRESSOR: PATIENT  33 BEGIN
REGRESSOR: PATIENT  33 END
REGRESSOR: PATIENT  19 BEGIN
REGRESSOR: PATIENT  19 END
REGRESSOR: PATIENT  37 BEGIN
REGRESSOR: PATIENT  37 END
REGRESSOR: PATIENT  46 BEGIN
REGRESSOR: PATIENT  46 END
REGRESSOR: PATIENT  79 BEGIN
REGRESSOR: PATIENT  79 END
REGRESSOR: PATIENT  51 BEGIN
REGRESSOR: PATIENT  51 END
REGRESSOR: PATIENT  14 BEGIN
REGRESSOR: PATIENT  14 END
REGRESSOR: PATIENT  35 BEGIN
REGRESSOR: PATIENT  35 END
REGRESSOR: PATIENT  78 BEGIN
REGRESSOR: PATIENT  78 END
REGRESSOR: PATIENT  1 BEGIN
REGRESSOR: PATIENT  1 END
REGRESSOR: PATIENT  18 BEGIN
REGRESSOR: PATIENT  18 END
REGRESSOR: PATIENT  12 BEGIN
REGRESSOR: PATIENT  12 END
REGRESSOR: PATIENT  28 BEGIN
REGRESSOR: PATIENT  28 END
REGRESSOR: PATIENT  25 BEGIN
REGRESSOR: PATIENT  25 END
REGRESSOR: PATIENT  52 BEGIN
REGRESSOR: PATIENT  52 END
REGRESSOR: PATIENT  74 BEGIN
REGRESSOR: PATIENT  74 END
REGRESSOR: PATIENT  67 BEGIN
REGRESSOR: PATIENT  67 END
REGRESSOR: PATIENT  75 BEGIN
REGRESSOR: PATIENT  75 END
REGRESSOR: PATIENT  63 BEGIN
REGRESSOR: PATIENT  63 END
REGRESSOR: PATIENT  24 BEGIN
REGRESSOR: PATIENT  24 END
REGRESSOR: PATIENT  17 BEGIN
REGRESSOR: PATIENT  17 END
REGRESSOR: PATIENT  16 BEGIN
REGRESSOR: PATIENT  16 END
REGRESSOR: PATIENT  60 BEGIN
REGRESSOR: PATIENT  60 END
REGRESSOR: PATIENT  43 BEGIN
REGRESSOR: PATIENT  43 END
REGRESSOR: PATIENT  76 BEGIN
REGRESSOR: PATIENT  76 END
REGRESSOR: PATIENT  5 BEGIN
REGRESSOR: PATIENT  5 END
REGRESSOR: PATIENT  58 BEGIN
REGRESSOR: PATIENT  58 END
REGRESSOR: PATIENT  7 BEGIN
REGRESSOR: PATIENT  7 END
REGRESSOR: PATIENT  47 BEGIN
REGRESSOR: PATIENT  47 END
REGRESSOR: PATIENT  23 BEGIN
REGRESSOR: PATIENT  23 END
REGRESSOR: PATIENT  41 BEGIN
REGRESSOR: PATIENT  41 END
REGRESSOR: PATIENT  77 BEGIN
REGRESSOR: PATIENT  77 END
REGRESSOR: PATIENT  55 BEGIN
REGRESSOR: PATIENT  55 END
REGRESSOR: PATIENT  61 BEGIN
REGRESSOR: PATIENT  61 END
REGRESSOR: PATIENT  9 BEGIN
REGRESSOR: PATIENT  9 END
REGRESSOR: PATIENT  44 BEGIN
REGRESSOR: PATIENT  44 END
REGRESSOR: PATIENT  3 BEGIN
REGRESSOR: PATIENT  3 END
REGRESSOR: PATIENT  59 BEGIN
REGRESSOR: PATIENT  59 END
REGRESSOR: PATIENT  6 BEGIN
REGRESSOR: PATIENT  6 END
REGRESSOR: PATIENT  53 BEGIN
REGRESSOR: PATIENT  53 END
REGRESSOR: PATIENT  40 BEGIN
REGRESSOR: PATIENT  40 END
REGRESSOR: PATIENT  49 BEGIN
REGRESSOR: PATIENT  49 END
REGRESSOR: PATIENT  38 BEGIN
REGRESSOR: PATIENT  38 END
REGRESSOR: PATIENT  42 BEGIN
REGRESSOR: PATIENT  42 END
REGRESSOR: PATIENT  65 BEGIN
REGRESSOR: PATIENT  65 END
REGRESSOR: PATIENT  72 BEGIN
REGRESSOR: PATIENT  72 END
REGRESSOR: PATIENT  68 BEGIN
REGRESSOR: PATIENT  68 END
REGRESSOR: PATIENT  36 BEGIN
REGRESSOR: PATIENT  36 END
REGRESSOR: PATIENT  64 BEGIN
REGRESSOR: PATIENT  64 END
REGRESSOR: PATIENT  80 BEGIN
REGRESSOR: PATIENT  80 END
REGRESSOR: PATIENT  29 BEGIN
REGRESSOR: PATIENT  29 END
REGRESSOR: PATIENT  4 BEGIN
REGRESSOR: PATIENT  4 END
REGRESSOR: PATIENT  66 BEGIN
REGRESSOR: PATIENT  66 END
REGRESSOR: PATIENT  31 BEGIN
REGRESSOR: PATIENT  31 END
REGRESSOR: PATIENT  69 BEGIN
REGRESSOR: PATIENT  69 END
REGRESSOR: PATIENT  2 BEGIN
REGRESSOR: PATIENT  2 END
REGRESSOR: PATIENT  8 BEGIN
REGRESSOR: PATIENT  8 END
REGRESSOR: PATIENT  32 BEGIN
REGRESSOR: PATIENT  32 END
REGRESSOR: PATIENT  54 BEGIN
REGRESSOR: PATIENT  54 END
REGRESSOR: PATIENT  39 BEGIN
REGRESSOR: PATIENT  39 END
REGRESSOR: PATIENT  20 BEGIN
REGRESSOR: PATIENT  20 END
REGRESSOR: PATIENT  50 BEGIN
REGRESSOR: PATIENT  50 END
REGRESSOR: PATIENT  73 BEGIN
REGRESSOR: PATIENT  73 END
REGRESSOR: PATIENT  62 BEGIN
REGRESSOR: PATIENT  62 END
REGRESSOR: PATIENT  13 BEGIN
REGRESSOR: PATIENT  13 END
REGRESSOR: PATIENT  15 BEGIN
REGRESSOR: PATIENT  15 END
REGRESSOR: PATIENT  34 BEGIN
REGRESSOR: PATIENT  34 END
REGRESSOR: PATIENT  27 BEGIN
REGRESSOR: PATIENT  27 END
REGRESSOR: PATIENT  10 BEGIN
REGRESSOR: PATIENT  10 END
REGRESSOR: PATIENT  45 BEGIN
REGRESSOR: PATIENT  45 END
REGRESSOR: PATIENT  71 BEGIN
REGRESSOR: PATIENT  71 END
REGRESSOR: PATIENT  26 BEGIN
REGRESSOR: PATIENT  26 END
REGRESSOR: PATIENT  56 BEGIN
REGRESSOR: PATIENT  56 END
REGRESSOR: PATIENT  11 BEGIN
REGRESSOR: PATIENT  11 END
REGRESSOR: PATIENT  57 BEGIN
REGRESSOR: PATIENT  57 END
REGRESSOR: PATIENT  30 BEGIN
REGRESSOR: PATIENT  30 END
REGRESSOR: PATIENT  48 BEGIN
REGRESSOR: PATIENT  48 END
REGRESSOR: PATIENT  22 BEGIN
REGRESSOR: PATIENT  22 END
REGRESSOR: PATIENT  21 BEGIN
REGRESSOR: PATIENT  21 END
REGRESSOR: PATIENT  70 BEGIN
REGRESSOR: PATIENT  70 END
REGRESSOR: START FIT
REGRESSOR: END FIT
